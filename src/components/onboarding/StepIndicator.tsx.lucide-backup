'use client';

import React from 'react';
import { Building2, User, MessageSquare, Star, Check } from 'lucide-react';
import { cn } from '@/lib/utils';

export interface Step {
  id: string;
  title: string;
  icon: React.ReactNode;
}

interface StepIndicatorProps {
  currentStep: number;
  steps: Step[];
  completedSteps?: number[];
}

const defaultSteps: Step[] = [
  {
    id: 'business-setup',
    title: 'Business Setup',
    icon: <Building2 className="w-5 h-5" />,
  },
  {
    id: 'add-customer',
    title: 'Add Customer',
    icon: <User className="w-5 h-5" />,
  },
  {
    id: 'first-review',
    title: 'First Review',
    icon: <MessageSquare className="w-5 h-5" />,
  },
  {
    id: 'complete',
    title: 'Complete',
    icon: <Star className="w-5 h-5" />,
  },
];

export function StepIndicator({ 
  currentStep, 
  steps = defaultSteps,
  completedSteps = []
}: StepIndicatorProps) {
  const getStepStatus = (index: number) => {
    if (completedSteps.includes(index) || index < currentStep) {
      return 'completed';
    }
    if (index === currentStep) {
      return 'active';
    }
    return 'inactive';
  };

  return (
    <div className="w-full px-4 py-6">
      {/* Desktop view */}
      <div className="hidden sm:block">
        <div className="flex items-center justify-between relative">
          {/* Progress line background */}
          <div className="absolute left-0 top-1/2 h-0.5 w-full bg-gray-200 -translate-y-1/2" />
          
          {/* Progress line fill */}
          <div 
            className="absolute left-0 top-1/2 h-0.5 bg-green-500 -translate-y-1/2 transition-all duration-300"
            style={{ width: `${(currentStep / (steps.length - 1)) * 100}%` }}
          />

          {steps.map((step, index) => {
            const status = getStepStatus(index);
            const isCompleted = status === 'completed';
            const isActive = status === 'active';
            const isInactive = status === 'inactive';

            return (
              <div key={step.id} className="relative flex flex-col items-center">
                {/* Step circle */}
                <div
                  className={cn(
                    "relative z-10 w-10 h-10 rounded-full flex items-center justify-center transition-all duration-200",
                    {
                      'bg-green-500 text-white': isCompleted,
                      'bg-blue-500 text-white ring-4 ring-blue-100': isActive,
                      'bg-gray-200 text-gray-400': isInactive,
                    }
                  )}
                >
                  {isCompleted ? (
                    <Check className="w-5 h-5" />
                  ) : (
                    <div className="text-current">{step.icon}</div>
                  )}
                </div>

                {/* Step label */}
                <span
                  className={cn(
                    "absolute -bottom-6 text-sm font-medium whitespace-nowrap transition-colors duration-200",
                    {
                      'text-green-700': isCompleted,
                      'text-blue-700': isActive,
                      'text-gray-500': isInactive,
                    }
                  )}
                >
                  {step.title}
                </span>
              </div>
            );
          })}
        </div>
      </div>

      {/* Mobile view - vertical */}
      <div className="sm:hidden">
        <div className="relative">
          {steps.map((step, index) => {
            const status = getStepStatus(index);
            const isCompleted = status === 'completed';
            const isActive = status === 'active';
            const isInactive = status === 'inactive';
            const isLast = index === steps.length - 1;

            return (
              <div key={step.id} className="relative flex items-center">
                {/* Vertical line */}
                {!isLast && (
                  <div
                    className={cn(
                      "absolute left-5 top-10 w-0.5 h-12 transition-colors duration-200",
                      {
                        'bg-green-500': isCompleted,
                        'bg-gray-200': !isCompleted,
                      }
                    )}
                  />
                )}

                {/* Step circle */}
                <div
                  className={cn(
                    "relative z-10 w-10 h-10 rounded-full flex items-center justify-center transition-all duration-200",
                    {
                      'bg-green-500 text-white': isCompleted,
                      'bg-blue-500 text-white ring-4 ring-blue-100': isActive,
                      'bg-gray-200 text-gray-400': isInactive,
                    }
                  )}
                >
                  {isCompleted ? (
                    <Check className="w-5 h-5" />
                  ) : (
                    <div className="text-current">{step.icon}</div>
                  )}
                </div>

                {/* Step content */}
                <div className="ml-4 flex-1">
                  <h3
                    className={cn(
                      "text-sm font-medium transition-colors duration-200",
                      {
                        'text-green-700': isCompleted,
                        'text-blue-700': isActive,
                        'text-gray-500': isInactive,
                      }
                    )}
                  >
                    {step.title}
                  </h3>
                  <p className="text-xs text-gray-500 mt-0.5">
                    Step {index + 1} of {steps.length}
                  </p>
                </div>

                {/* Spacing for non-last items */}
                {!isLast && <div className="h-12" />}
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
}