'use client';

import React, { useState, useEffect } from 'react';
import { Modal } from './Modal';
import { Customer } from '../types';
import { Tag, Plus, X, Save, Hash, User } from 'lucide-react';

interface CustomerTagsModalProps {
  isOpen: boolean;
  onClose: () => void;
  customer: Customer | null;
  onSave?: (tags: string[]) => void;
}

interface CustomerTag {
  id: string;
  name: string;
  color: string;
  createdAt: string;
}

const TAG_COLORS = [
  { name: 'Blue', value: 'blue', bg: 'bg-blue-100', text: 'text-blue-800' },
  { name: 'Green', value: 'green', bg: 'bg-green-100', text: 'text-green-800' },
  { name: 'Yellow', value: 'yellow', bg: 'bg-yellow-100', text: 'text-yellow-800' },
  { name: 'Red', value: 'red', bg: 'bg-red-100', text: 'text-red-800' },
  { name: 'Purple', value: 'purple', bg: 'bg-purple-100', text: 'text-purple-800' },
  { name: 'Pink', value: 'pink', bg: 'bg-pink-100', text: 'text-pink-800' },
  { name: 'Indigo', value: 'indigo', bg: 'bg-indigo-100', text: 'text-indigo-800' },
  { name: 'Gray', value: 'gray', bg: 'bg-gray-100', text: 'text-charcoal' },
];

export function CustomerTagsModal({
  isOpen,
  onClose,
  customer,
  onSave
}: CustomerTagsModalProps) {
  const [customerTags, setCustomerTags] = useState<CustomerTag[]>([]);
  const [availableTags, setAvailableTags] = useState<CustomerTag[]>([]);
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [newTagName, setNewTagName] = useState('');
  const [newTagColor, setNewTagColor] = useState('blue');
  const [showNewTagForm, setShowNewTagForm] = useState(false);

  useEffect(() => {
    if (isOpen && customer) {
      loadTags();
    }
  }, [isOpen, customer]);

  const loadTags = async () => {
    if (!customer) return;
    
    setLoading(true);
    try {
      // Load customer's current tags
      const customerTagsResponse = await fetch(`/api/customers/${customer.id}/tags`);
      const customerTagsData = await customerTagsResponse.json();
      
      // Load all available tags for the business
      const availableTagsResponse = await fetch('/api/tags');
      const availableTagsData = await availableTagsResponse.json();
      
      if (customerTagsData.success) {
        setCustomerTags(customerTagsData.data || []);
      }
      
      if (availableTagsData.success) {
        setAvailableTags(availableTagsData.data || []);
      }
    } catch (error) {
      console.error('Failed to load tags:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleAddTag = async (tag: CustomerTag) => {
    if (!customer) return;
    
    try {
      const response = await fetch(`/api/customers/${customer.id}/tags`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          tagId: tag.id,
        }),
      });

      if (response.ok) {
        setCustomerTags(prev => [...prev, tag]);
        onSave?.(customerTags.map(t => t.name));
      }
    } catch (error) {
      console.error('Failed to add tag:', error);
    }
  };

  const handleRemoveTag = async (tagId: string) => {
    if (!customer) return;
    
    try {
      const response = await fetch(`/api/customers/${customer.id}/tags/${tagId}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        setCustomerTags(prev => prev.filter(t => t.id !== tagId));
        onSave?.(customerTags.filter(t => t.id !== tagId).map(t => t.name));
      }
    } catch (error) {
      console.error('Failed to remove tag:', error);
    }
  };

  const handleCreateNewTag = async () => {
    if (!newTagName.trim()) return;
    
    setSaving(true);
    try {
      const response = await fetch('/api/tags', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: newTagName.trim(),
          color: newTagColor,
        }),
      });

      const data = await response.json();
      if (data.success) {
        const newTag = data.data;
        setAvailableTags(prev => [...prev, newTag]);
        setNewTagName('');
        setNewTagColor('blue');
        setShowNewTagForm(false);
        
        // Automatically add the new tag to the customer
        await handleAddTag(newTag);
      }
    } catch (error) {
      console.error('Failed to create tag:', error);
    } finally {
      setSaving(false);
    }
  };

  const getTagColorClasses = (color: string) => {
    const colorConfig = TAG_COLORS.find(c => c.value === color);
    return colorConfig ? { bg: colorConfig.bg, text: colorConfig.text } : { bg: 'bg-gray-100', text: 'text-charcoal' };
  };

  const getAvailableTagsToAdd = () => {
    const customerTagIds = customerTags.map(t => t.id);
    return availableTags.filter(tag => !customerTagIds.includes(tag.id));
  };

  if (!customer) return null;

  return (
    <Modal isOpen={isOpen} onClose={onClose} title="Manage Customer Tags" size="lg">
      <div className="space-y-6">
        {/* Customer Header */}
        <div className="flex items-center space-x-3 p-4 bg-gray-50 rounded-lg">
          <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
            <User className="w-5 h-5 text-blue-600" />
          </div>
          <div>
            <h3 className="font-medium text-gray-900">
              {customer.firstName} {customer.lastName}
            </h3>
            <p className="text-sm text-gray-500">{customer.email}</p>
          </div>
        </div>

        {loading ? (
          <div className="flex justify-center py-8">
            <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
            <span className="ml-2 text-gray-600">Loading tags...</span>
          </div>
        ) : (
          <>
            {/* Current Tags */}
            <div className="space-y-3">
              <h4 className="text-sm font-medium text-gray-900 flex items-center space-x-2">
                <Tag className="w-4 h-4" />
                <span>Current Tags</span>
              </h4>
              
              {customerTags.length === 0 ? (
                <div className="text-center py-6 text-gray-500 border border-dashed border-gray-300 rounded-lg">
                  <Tag className="w-8 h-8 mx-auto mb-2 text-gray-400" />
                  <p>No tags assigned</p>
                  <p className="text-sm">Add tags from the available tags below</p>
                </div>
              ) : (
                <div className="flex flex-wrap gap-2">
                  {customerTags.map((tag) => {
                    const colors = getTagColorClasses(tag.color);
                    return (
                      <div
                        key={tag.id}
                        className={`flex items-center space-x-1 px-3 py-1 rounded-full text-sm font-medium ${colors.bg} ${colors.text}`}
                      >
                        <Hash className="w-3 h-3" />
                        <span>{tag.name}</span>
                        <button
                          onClick={() => handleRemoveTag(tag.id)}
                          className="ml-1 hover:bg-black/10 rounded-full p-0.5"
                        >
                          <X className="w-3 h-3" />
                        </button>
                      </div>
                    );
                  })}
                </div>
              )}
            </div>

            {/* Available Tags */}
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <h4 className="text-sm font-medium text-gray-900">Available Tags</h4>
                <button
                  onClick={() => setShowNewTagForm(!showNewTagForm)}
                  className="text-sm text-blue-600 hover:text-blue-700 flex items-center space-x-1"
                >
                  <Plus className="w-4 h-4" />
                  <span>Create New Tag</span>
                </button>
              </div>

              {/* New Tag Form */}
              {showNewTagForm && (
                <div className="bg-gray-50 border border-gray-200 rounded-lg p-4 space-y-3">
                  <div className="flex space-x-3">
                    <div className="flex-1">
                      <input
                        type="text"
                        value={newTagName}
                        onChange={(e) => setNewTagName(e.target.value)}
                        placeholder="Tag name..."
                        className="w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        onKeyDown={(e) => e.key === 'Enter' && handleCreateNewTag()}
                      />
                    </div>
                    <select
                      value={newTagColor}
                      onChange={(e) => setNewTagColor(e.target.value)}
                      className="px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      {TAG_COLORS.map((color) => (
                        <option key={color.value} value={color.value}>
                          {color.name}
                        </option>
                      ))}
                    </select>
                  </div>
                  <div className="flex justify-end space-x-2">
                    <button
                      onClick={() => {
                        setShowNewTagForm(false);
                        setNewTagName('');
                        setNewTagColor('blue');
                      }}
                      className="px-3 py-1 text-sm text-gray-600 hover:text-charcoal"
                    >
                      Cancel
                    </button>
                    <button
                      onClick={handleCreateNewTag}
                      disabled={!newTagName.trim() || saving}
                      className="px-3 py-1 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-1"
                    >
                      <Save className="w-3 h-3" />
                      <span>{saving ? 'Creating...' : 'Create'}</span>
                    </button>
                  </div>
                </div>
              )}

              {/* Available Tags List */}
              <div className="max-h-48 overflow-y-auto">
                {getAvailableTagsToAdd().length === 0 ? (
                  <div className="text-center py-6 text-gray-500">
                    <Tag className="w-6 h-6 mx-auto mb-2 text-gray-400" />
                    <p className="text-sm">All available tags are already assigned</p>
                  </div>
                ) : (
                  <div className="flex flex-wrap gap-2">
                    {getAvailableTagsToAdd().map((tag) => {
                      const colors = getTagColorClasses(tag.color);
                      return (
                        <button
                          key={tag.id}
                          onClick={() => handleAddTag(tag)}
                          className={`flex items-center space-x-1 px-3 py-1 rounded-full text-sm font-medium ${colors.bg} ${colors.text} hover:opacity-80 transition-opacity`}
                        >
                          <Hash className="w-3 h-3" />
                          <span>{tag.name}</span>
                          <Plus className="w-3 h-3" />
                        </button>
                      );
                    })}
                  </div>
                )}
              </div>
            </div>
          </>
        )}

        {/* Actions */}
        <div className="flex justify-end pt-4 border-t border-gray-200">
          <button
            onClick={onClose}
            className="px-4 py-2 text-gray-600 hover:text-charcoal transition-colors flex items-center space-x-2"
          >
            <X className="w-4 h-4" />
            <span>Close</span>
          </button>
        </div>
      </div>
    </Modal>
  );
}