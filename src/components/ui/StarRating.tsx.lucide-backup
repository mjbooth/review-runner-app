'use client';

import React from 'react';
import { Star } from 'lucide-react';
import { cn } from '@/lib/utils';

interface StarRatingProps {
  rating: number;
  maxRating?: number;
  size?: 'sm' | 'md' | 'lg';
  showValue?: boolean;
  showCount?: boolean;
  reviewCount?: number;
  className?: string;
  readonly?: boolean;
  onChange?: (rating: number) => void;
}

export function StarRating({
  rating,
  maxRating = 5,
  size = 'md',
  showValue = false,
  showCount = false,
  reviewCount,
  className,
  readonly = true,
  onChange,
}: StarRatingProps) {
  const sizeClasses = {
    sm: 'w-3 h-3',
    md: 'w-4 h-4',
    lg: 'w-5 h-5',
  };

  const textSizeClasses = {
    sm: 'text-xs',
    md: 'text-sm',
    lg: 'text-base',
  };

  const handleStarClick = (newRating: number) => {
    if (!readonly && onChange) {
      onChange(newRating);
    }
  };

  const renderStar = (index: number) => {
    const starValue = index + 1;
    const filled = rating >= starValue;
    const halfFilled = rating >= starValue - 0.5 && rating < starValue;

    return (
      <button
        key={index}
        type="button"
        onClick={() => handleStarClick(starValue)}
        disabled={readonly}
        className={cn(
          'relative transition-colors duration-150',
          !readonly && 'hover:scale-110 cursor-pointer',
          readonly && 'cursor-default'
        )}
        aria-label={`${starValue} star${starValue !== 1 ? 's' : ''}`}
      >
        {/* Background star (empty) */}
        <Star
          className={cn(
            sizeClasses[size],
            'text-gray-300'
          )}
          fill="currentColor"
        />
        
        {/* Foreground star (filled/half-filled) */}
        {(filled || halfFilled) && (
          <div
            className="absolute inset-0 overflow-hidden"
            style={{
              width: halfFilled ? '50%' : '100%',
            }}
          >
            <Star
              className={cn(
                sizeClasses[size],
                'text-yellow-400'
              )}
              fill="currentColor"
            />
          </div>
        )}
      </button>
    );
  };

  return (
    <div className={cn('flex items-center space-x-1', className)}>
      {/* Stars */}
      <div className="flex items-center space-x-0.5">
        {Array.from({ length: maxRating }, (_, index) => renderStar(index))}
      </div>

      {/* Rating Value */}
      {showValue && (
        <span className={cn('font-medium text-gray-900', textSizeClasses[size])}>
          {rating.toFixed(1)}
        </span>
      )}

      {/* Review Count */}
      {showCount && reviewCount !== undefined && (
        <span className={cn('text-gray-500', textSizeClasses[size])}>
          ({reviewCount.toLocaleString()} review{reviewCount !== 1 ? 's' : ''})
        </span>
      )}
    </div>
  );
}