// Simplified Prisma schema for MVP
// Removes job queue complexity while keeping core functionality

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Business {
  id                String   @id @default(uuid())
  clerkUserId       String   @unique @map("clerk_user_id")
  name              String
  email             String
  phone             String?
  address           String?
  website           String?
  googlePlaceId     String?  @map("google_place_id")
  googlePlaceName   String?  @map("google_place_name")
  googleReviewUrl   String?  @map("google_review_url")
  googleMapsUrl     String?  @map("google_maps_url")
  googleRating      Float?   @map("google_rating")
  googleReviewCount Int?     @map("google_review_count")
  googleTypes       String[] @map("google_types") @default([])
  googlePhoneNumber String?  @map("google_phone_number")
  googleWebsite     String?  @map("google_website")
  googlePhotos      Json?    @map("google_photos")
  lastSyncedAt      DateTime? @map("last_synced_at")
  timezone          String   @default("Europe/London")
  smsCreditsUsed    Int      @default(0) @map("sms_credits_used")
  smsCreditsLimit   Int      @default(1000) @map("sms_credits_limit")
  emailCreditsUsed  Int      @default(0) @map("email_credits_used")
  emailCreditsLimit Int      @default(5000) @map("email_credits_limit")
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relationships
  customers      Customer[]
  reviewRequests ReviewRequest[]
  suppressions   Suppression[]
  events         Event[]

  @@map("businesses")
}

model Customer {
  id          String   @id @default(uuid())
  businessId  String   @map("business_id")
  firstName   String   @map("first_name")
  lastName    String?  @map("last_name")
  email       String?
  phone       String?
  address     String?
  notes       String?
  tags        String[] @default([])
  lastContact DateTime? @map("last_contact")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relationships
  business       Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  reviewRequests ReviewRequest[]

  // Indexes
  @@index([businessId])
  @@index([email])
  @@index([phone])
  @@map("customers")
}

enum RequestChannel {
  SMS
  EMAIL
}

enum RequestStatus {
  QUEUED
  SENT
  DELIVERED
  CLICKED
  BOUNCED
  FAILED
  OPTED_OUT
  COMPLETED
  FOLLOWUP_SENT
}

model ReviewRequest {
  id              String        @id @default(uuid())
  businessId      String        @map("business_id")
  customerId      String        @map("customer_id")
  channel         RequestChannel
  status          RequestStatus @default(QUEUED)
  subject         String?       // For emails
  messageContent  String        @map("message_content")
  reviewUrl       String        @map("review_url")
  trackingUrl     String        @unique @map("tracking_url")
  trackingUuid    String        @unique @map("tracking_uuid")
  scheduledFor    DateTime?     @map("scheduled_for")
  sentAt          DateTime?     @map("sent_at")
  deliveredAt     DateTime?     @map("delivered_at")
  clickedAt       DateTime?     @map("clicked_at")
  completedAt     DateTime?     @map("completed_at")
  followupSentAt  DateTime?     @map("followup_sent_at")
  externalId      String?       @map("external_id") // Twilio/SendGrid message ID
  errorMessage    String?       @map("error_message")
  retryCount      Int           @default(0) @map("retry_count")
  metadata        Json?         // Additional tracking data
  isActive        Boolean       @default(true) @map("is_active")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Relationships
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  events   Event[]

  // Indexes
  @@index([businessId])
  @@index([customerId])
  @@index([status])
  @@index([trackingUuid])
  @@index([scheduledFor])
  @@index([createdAt])
  @@map("review_requests")
}

enum EventType {
  REQUEST_CREATED
  REQUEST_QUEUED
  REQUEST_SENT
  REQUEST_DELIVERED
  REQUEST_BOUNCED
  REQUEST_FAILED
  REQUEST_CLICKED
  REQUEST_COMPLETED
  REQUEST_OPTED_OUT
  FOLLOWUP_SENT
  WEBHOOK_RECEIVED
  SUPPRESSION_ADDED
  ERROR_OCCURRED
}

model Event {
  id              String    @id @default(uuid())
  businessId      String    @map("business_id")
  reviewRequestId String?   @map("review_request_id")
  type            EventType
  source          String    // 'system', 'twilio', 'sendgrid', 'user'
  description     String
  metadata        Json?     // Event-specific data
  ipAddress       String?   @map("ip_address")
  userAgent       String?   @map("user_agent")
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relationships
  business      Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  reviewRequest ReviewRequest? @relation(fields: [reviewRequestId], references: [id], onDelete: SetNull)

  // Indexes
  @@index([businessId])
  @@index([reviewRequestId])
  @@index([type])
  @@index([createdAt])
  @@map("events")
}

enum SuppressionReason {
  SMS_STOP
  EMAIL_UNSUBSCRIBE
  EMAIL_BOUNCE
  EMAIL_SPAM_COMPLAINT
  MANUAL
  GDPR_REQUEST
}

model Suppression {
  id         String            @id @default(uuid())
  businessId String            @map("business_id")
  contact    String            // Email or phone number
  channel    RequestChannel?   // If null, suppressed for all channels
  reason     SuppressionReason
  source     String            // Where the suppression came from
  notes      String?
  expiresAt  DateTime?         @map("expires_at") // For temporary suppressions
  isActive   Boolean           @default(true) @map("is_active")
  createdAt  DateTime          @default(now()) @map("created_at")
  updatedAt  DateTime          @updatedAt @map("updated_at")

  // Relationships
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([businessId])
  @@index([contact])
  @@index([channel])
  @@unique([businessId, contact, channel])
  @@map("suppressions")
}